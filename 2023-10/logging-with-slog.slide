Logging with log/slog
Golang Kiel Meetup #2
12 Oct 2023

Christopher Hlubek
networkteam GmbH
networkteam.social/@christopher

* Where are we coming from?

* The standard `log` package

In the standard library since the release of Go 1 in March 2012.

.play -edit logging-with-slog/log/example.go

Downsides:

- Formatted logging, but not structured logging or levels

* We have many structured logging packages

- Logrus
- Zap
- zerolog
- Logr
- glog
- go-kit/log
- hclog
- klog
- ...

* Logrus example

.code logging-with-slog/logrus/example.go

* Why a new package?

- Every 3rd party package has its own API.
- No standard API!
- Many libraries accept / need log adapters (e.g. DB drivers).
- It's tedious to write adapters for every package!

Can we have a standard structured logging API (with high performance)?

* Meet `log/slog`

* About `log/slog`

- Based on a discussion and proposal by Jonathan Amsterdam:

.link https://go.googlesource.com/proposal/+/master/design/56345-structured-logging.md

- Is in the standard library since the release of Go 1.21.
- It captures best practices of other structured logging approaches.

* Using the default logger

.play -edit logging-with-slog/slog/default-logger.go

Fun fact: this will use the `log` package under the hood.

* Customizing the default handler

.play -edit logging-with-slog/slog/customize-default-handler.go /START/,/END/

* Add attributes

.play -edit logging-with-slog/slog/structured-key-pair.go /START/,/END/

Attributes can be given as key/value pairs.

* Add attributes (cont.)

.play -edit logging-with-slog/slog/structured-attr.go /START/,/END/

Attributes can be given as type-safe `Attr`.

* Using LogAttrs

.play -edit logging-with-slog/slog/log-attrs.go /START/,/END/

You can use the full `LogAttrs` function. It is supposed to be faster / less allocating.

Context can also be passed via `slog.Log`, `slog.DebugContext`, etc.

* Groups

Attributes can be nested in a group:

.play -edit logging-with-slog/slog/log-group.go /START/,/END/

It is up to the handler how a group is formatted.

* Design and architecture

Let's have a look at the main types:

- `Logger`: the "frontend" for logging
- `Record`: a self-contained log record object created by a Logger
- `Handler`: the "backend" for logging, provides formatting and destination of each Record
- `Attr`: A key-value pair that can also contain groups

* Preparing a logger with `With`

You can prepare a logger with attributes:

.play -edit logging-with-slog/slog/log-with.go /START/,/END/

* Levels

* Predefined log levels

There's a `Level` type (`int`) with the following levels:

- `LevelDebug` (-4)
- `LevelInfo` (0)
- `LevelWarn` (4)
- `LevelError` (8)

This gives some space for custom levels!

The actual level is given as a `Leveler` to a handler.

* Setting a fixed level

.play -edit logging-with-slog/slog/levels-fixed.go /START/,/END/

What happens if we log to a non-existing level?

* Checking if a level is enabled

.play -edit logging-with-slog/slog/levels-enabled.go /START/,/END/

* Using a dynamic level

It can be helpful to change the level of a running application:

.play -edit logging-with-slog/slog/levels-dynamic.go /START/,/END/

* Handlers

* What is a Handler?

- Processes a log `Record`
- Typically writes to a destination
- Performs formatting

* Existing handlers

`slog.TextHandler`

`slog.JSONHandler`

https://github.com/lmittmann/tint

.image logging-with-slog//slog/handler_tint_screenshot.png _ 800

https://github.com/networkteam/slogutils CLIHandler

.image logging-with-slog//slog/handler_cli_screenshot.png _ 800

* Handler options

Each handler defines its own options. Most support `Level` and `ReplaceAttr`.

* Adding custom log levels

.play -edit logging-with-slog/slog/levels-custom.go /START/,/END/

(From https://betterstack.com/community/guides/logging/logging-in-go/#customizing-log-levels)

* Bonus level

* Deep dive: does it allocate?

.play -edit logging-with-slog/slog/structured-attr-alloc.go /START/,/END/

* Deep dive: which is fastest?

.play -edit logging-with-slog/slog/structured-attr-bench.go /START/,/END/
